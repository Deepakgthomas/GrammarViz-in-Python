# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_jmotif')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_jmotif')
    _jmotif = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_jmotif', [dirname(__file__)])
        except ImportError:
            import _jmotif
            return _jmotif
        try:
            _mod = imp.load_module('_jmotif', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _jmotif = swig_import_helper()
    del swig_import_helper
else:
    import _jmotif
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def znorm(ts, threshold):
    return _jmotif.znorm(ts, threshold)
znorm = _jmotif.znorm

def paa(ts, paa_num):
    return _jmotif.paa(ts, paa_num)
paa = _jmotif.paa

def alphabet_to_cuts(a_size):
    return _jmotif.alphabet_to_cuts(a_size)
alphabet_to_cuts = _jmotif.alphabet_to_cuts

def series_to_chars(ts, a_size):
    return _jmotif.series_to_chars(ts, a_size)
series_to_chars = _jmotif.series_to_chars

def series_to_string(ts, a_size):
    return _jmotif.series_to_string(ts, a_size)
series_to_string = _jmotif.series_to_string

def sax_via_window(ts, w_size, paa_size, a_size, nr_strategy, n_threshold):
    return _jmotif.sax_via_window(ts, w_size, paa_size, a_size, nr_strategy, n_threshold)
sax_via_window = _jmotif.sax_via_window

def sax_by_chunking(ts, paa_size, a_size, n_threshold):
    return _jmotif.sax_by_chunking(ts, paa_size, a_size, n_threshold)
sax_by_chunking = _jmotif.sax_by_chunking

def idx_to_letter(idx):
    return _jmotif.idx_to_letter(idx)
idx_to_letter = _jmotif.idx_to_letter

def letter_to_idx(letter):
    return _jmotif.letter_to_idx(letter)
letter_to_idx = _jmotif.letter_to_idx

def letters_to_idx(str):
    return _jmotif.letters_to_idx(str)
letters_to_idx = _jmotif.letters_to_idx

def is_equal_str(a, b):
    return _jmotif.is_equal_str(a, b)
is_equal_str = _jmotif.is_equal_str

def is_equal_mindist(a, b):
    return _jmotif.is_equal_mindist(a, b)
is_equal_mindist = _jmotif.is_equal_mindist

def euclidean_dist(seq1, seq2):
    return _jmotif.euclidean_dist(seq1, seq2)
euclidean_dist = _jmotif.euclidean_dist

def early_abandoned_dist(seq1, seq2, upper_limit):
    return _jmotif.early_abandoned_dist(seq1, seq2, upper_limit)
early_abandoned_dist = _jmotif.early_abandoned_dist

def series_to_wordbag(ts, w_size, paa_size, a_size, nr_strategy, n_threshold):
    return _jmotif.series_to_wordbag(ts, w_size, paa_size, a_size, nr_strategy, n_threshold)
series_to_wordbag = _jmotif.series_to_wordbag

def manyseries_to_wordbag(data, w_size, paa_size, a_size, nr_strategy, n_threshold):
    return _jmotif.manyseries_to_wordbag(data, w_size, paa_size, a_size, nr_strategy, n_threshold)
manyseries_to_wordbag = _jmotif.manyseries_to_wordbag

def bags_to_tfidf(data):
    return _jmotif.bags_to_tfidf(data)
bags_to_tfidf = _jmotif.bags_to_tfidf

def cosine_sim(data):
    return _jmotif.cosine_sim(data)
cosine_sim = _jmotif.cosine_sim
class discord_record(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, discord_record, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, discord_record, name)
    __repr__ = _swig_repr
    __swig_setmethods__["index"] = _jmotif.discord_record_index_set
    __swig_getmethods__["index"] = _jmotif.discord_record_index_get
    if _newclass:
        index = _swig_property(_jmotif.discord_record_index_get, _jmotif.discord_record_index_set)
    __swig_setmethods__["nn_distance"] = _jmotif.discord_record_nn_distance_set
    __swig_getmethods__["nn_distance"] = _jmotif.discord_record_nn_distance_get
    if _newclass:
        nn_distance = _swig_property(_jmotif.discord_record_nn_distance_get, _jmotif.discord_record_nn_distance_set)

    def __init__(self):
        this = _jmotif.new_discord_record()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _jmotif.delete_discord_record
    __del__ = lambda self: None
discord_record_swigregister = _jmotif.discord_record_swigregister
discord_record_swigregister(discord_record)
cvar = _jmotif.cvar
LETTERS = cvar.LETTERS

class VisitRegistry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisitRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisitRegistry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _jmotif.VisitRegistry_size_set
    __swig_getmethods__["size"] = _jmotif.VisitRegistry_size_get
    if _newclass:
        size = _swig_property(_jmotif.VisitRegistry_size_get, _jmotif.VisitRegistry_size_set)
    __swig_setmethods__["registry"] = _jmotif.VisitRegistry_registry_set
    __swig_getmethods__["registry"] = _jmotif.VisitRegistry_registry_get
    if _newclass:
        registry = _swig_property(_jmotif.VisitRegistry_registry_get, _jmotif.VisitRegistry_registry_set)
    __swig_setmethods__["unvisited_count"] = _jmotif.VisitRegistry_unvisited_count_set
    __swig_getmethods__["unvisited_count"] = _jmotif.VisitRegistry_unvisited_count_get
    if _newclass:
        unvisited_count = _swig_property(_jmotif.VisitRegistry_unvisited_count_get, _jmotif.VisitRegistry_unvisited_count_set)

    def __init__(self, capacity):
        this = _jmotif.new_VisitRegistry(capacity)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNextUnvisited(self):
        return _jmotif.VisitRegistry_getNextUnvisited(self)

    def markVisited(self, *args):
        return _jmotif.VisitRegistry_markVisited(self, *args)

    def isVisited(self, idx):
        return _jmotif.VisitRegistry_isVisited(self, idx)
    __swig_destroy__ = _jmotif.delete_VisitRegistry
    __del__ = lambda self: None
VisitRegistry_swigregister = _jmotif.VisitRegistry_swigregister
VisitRegistry_swigregister(VisitRegistry)


def find_discords_brute_force(ts, w_size, discords_num):
    return _jmotif.find_discords_brute_force(ts, w_size, discords_num)
find_discords_brute_force = _jmotif.find_discords_brute_force

def find_discords_hotsax(ts, w_size, paa_size, a_size, n_threshold, discords_num):
    return _jmotif.find_discords_hotsax(ts, w_size, paa_size, a_size, n_threshold, discords_num)
find_discords_hotsax = _jmotif.find_discords_hotsax
class repair_symbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, repair_symbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, repair_symbol, name)
    __repr__ = _swig_repr
    __swig_setmethods__["payload"] = _jmotif.repair_symbol_payload_set
    __swig_getmethods__["payload"] = _jmotif.repair_symbol_payload_get
    if _newclass:
        payload = _swig_property(_jmotif.repair_symbol_payload_get, _jmotif.repair_symbol_payload_set)
    __swig_setmethods__["str_index"] = _jmotif.repair_symbol_str_index_set
    __swig_getmethods__["str_index"] = _jmotif.repair_symbol_str_index_get
    if _newclass:
        str_index = _swig_property(_jmotif.repair_symbol_str_index_get, _jmotif.repair_symbol_str_index_set)

    def __init__(self, *args):
        this = _jmotif.new_repair_symbol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def is_guard(self):
        return _jmotif.repair_symbol_is_guard(self)

    def to_string(self):
        return _jmotif.repair_symbol_to_string(self)
    __swig_destroy__ = _jmotif.delete_repair_symbol
    __del__ = lambda self: None
repair_symbol_swigregister = _jmotif.repair_symbol_swigregister
repair_symbol_swigregister(repair_symbol)

class repair_symbol_record(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, repair_symbol_record, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, repair_symbol_record, name)
    __repr__ = _swig_repr
    __swig_setmethods__["payload"] = _jmotif.repair_symbol_record_payload_set
    __swig_getmethods__["payload"] = _jmotif.repair_symbol_record_payload_get
    if _newclass:
        payload = _swig_property(_jmotif.repair_symbol_record_payload_get, _jmotif.repair_symbol_record_payload_set)
    __swig_setmethods__["prev"] = _jmotif.repair_symbol_record_prev_set
    __swig_getmethods__["prev"] = _jmotif.repair_symbol_record_prev_get
    if _newclass:
        prev = _swig_property(_jmotif.repair_symbol_record_prev_get, _jmotif.repair_symbol_record_prev_set)
    __swig_setmethods__["next"] = _jmotif.repair_symbol_record_next_set
    __swig_getmethods__["next"] = _jmotif.repair_symbol_record_next_get
    if _newclass:
        next = _swig_property(_jmotif.repair_symbol_record_next_get, _jmotif.repair_symbol_record_next_set)

    def __init__(self, symbol):
        this = _jmotif.new_repair_symbol_record(symbol)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _jmotif.delete_repair_symbol_record
    __del__ = lambda self: None
repair_symbol_record_swigregister = _jmotif.repair_symbol_record_swigregister
repair_symbol_record_swigregister(repair_symbol_record)

class repair_rule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, repair_rule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, repair_rule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _jmotif.repair_rule_id_set
    __swig_getmethods__["id"] = _jmotif.repair_rule_id_get
    if _newclass:
        id = _swig_property(_jmotif.repair_rule_id_get, _jmotif.repair_rule_id_set)
    __swig_setmethods__["rule_use"] = _jmotif.repair_rule_rule_use_set
    __swig_getmethods__["rule_use"] = _jmotif.repair_rule_rule_use_get
    if _newclass:
        rule_use = _swig_property(_jmotif.repair_rule_rule_use_get, _jmotif.repair_rule_rule_use_set)
    __swig_setmethods__["first"] = _jmotif.repair_rule_first_set
    __swig_getmethods__["first"] = _jmotif.repair_rule_first_get
    if _newclass:
        first = _swig_property(_jmotif.repair_rule_first_get, _jmotif.repair_rule_first_set)
    __swig_setmethods__["second"] = _jmotif.repair_rule_second_set
    __swig_getmethods__["second"] = _jmotif.repair_rule_second_get
    if _newclass:
        second = _swig_property(_jmotif.repair_rule_second_get, _jmotif.repair_rule_second_set)
    __swig_setmethods__["expanded_rule_string"] = _jmotif.repair_rule_expanded_rule_string_set
    __swig_getmethods__["expanded_rule_string"] = _jmotif.repair_rule_expanded_rule_string_get
    if _newclass:
        expanded_rule_string = _swig_property(_jmotif.repair_rule_expanded_rule_string_get, _jmotif.repair_rule_expanded_rule_string_set)
    __swig_setmethods__["occurrences"] = _jmotif.repair_rule_occurrences_set
    __swig_getmethods__["occurrences"] = _jmotif.repair_rule_occurrences_get
    if _newclass:
        occurrences = _swig_property(_jmotif.repair_rule_occurrences_get, _jmotif.repair_rule_occurrences_set)

    def __init__(self):
        this = _jmotif.new_repair_rule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_rule_string(self):
        return _jmotif.repair_rule_get_rule_string(self)
    __swig_destroy__ = _jmotif.delete_repair_rule
    __del__ = lambda self: None
repair_rule_swigregister = _jmotif.repair_rule_swigregister
repair_rule_swigregister(repair_rule)

class repair_guard(repair_symbol):
    __swig_setmethods__ = {}
    for _s in [repair_symbol]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, repair_guard, name, value)
    __swig_getmethods__ = {}
    for _s in [repair_symbol]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, repair_guard, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _jmotif.repair_guard_r_set
    __swig_getmethods__["r"] = _jmotif.repair_guard_r_get
    if _newclass:
        r = _swig_property(_jmotif.repair_guard_r_get, _jmotif.repair_guard_r_set)

    def __init__(self, *args):
        this = _jmotif.new_repair_guard(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def is_guard(self):
        return _jmotif.repair_guard_is_guard(self)

    def get_expanded_string(self):
        return _jmotif.repair_guard_get_expanded_string(self)
    __swig_destroy__ = _jmotif.delete_repair_guard
    __del__ = lambda self: None
repair_guard_swigregister = _jmotif.repair_guard_swigregister
repair_guard_swigregister(repair_guard)

class repair_digram(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, repair_digram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, repair_digram, name)
    __repr__ = _swig_repr
    __swig_setmethods__["digram"] = _jmotif.repair_digram_digram_set
    __swig_getmethods__["digram"] = _jmotif.repair_digram_digram_get
    if _newclass:
        digram = _swig_property(_jmotif.repair_digram_digram_get, _jmotif.repair_digram_digram_set)
    __swig_setmethods__["freq"] = _jmotif.repair_digram_freq_set
    __swig_getmethods__["freq"] = _jmotif.repair_digram_freq_get
    if _newclass:
        freq = _swig_property(_jmotif.repair_digram_freq_get, _jmotif.repair_digram_freq_set)

    def __init__(self, str, index):
        this = _jmotif.new_repair_digram(str, index)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _jmotif.delete_repair_digram
    __del__ = lambda self: None
repair_digram_swigregister = _jmotif.repair_digram_swigregister
repair_digram_swigregister(repair_digram)

class repair_pqueue_node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, repair_pqueue_node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, repair_pqueue_node, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prev"] = _jmotif.repair_pqueue_node_prev_set
    __swig_getmethods__["prev"] = _jmotif.repair_pqueue_node_prev_get
    if _newclass:
        prev = _swig_property(_jmotif.repair_pqueue_node_prev_get, _jmotif.repair_pqueue_node_prev_set)
    __swig_setmethods__["next"] = _jmotif.repair_pqueue_node_next_set
    __swig_getmethods__["next"] = _jmotif.repair_pqueue_node_next_get
    if _newclass:
        next = _swig_property(_jmotif.repair_pqueue_node_next_get, _jmotif.repair_pqueue_node_next_set)
    __swig_setmethods__["payload"] = _jmotif.repair_pqueue_node_payload_set
    __swig_getmethods__["payload"] = _jmotif.repair_pqueue_node_payload_get
    if _newclass:
        payload = _swig_property(_jmotif.repair_pqueue_node_payload_get, _jmotif.repair_pqueue_node_payload_set)

    def __init__(self, *args):
        this = _jmotif.new_repair_pqueue_node(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _jmotif.delete_repair_pqueue_node
    __del__ = lambda self: None
repair_pqueue_node_swigregister = _jmotif.repair_pqueue_node_swigregister
repair_pqueue_node_swigregister(repair_pqueue_node)

class repair_priority_queue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, repair_priority_queue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, repair_priority_queue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["queue_head"] = _jmotif.repair_priority_queue_queue_head_set
    __swig_getmethods__["queue_head"] = _jmotif.repair_priority_queue_queue_head_get
    if _newclass:
        queue_head = _swig_property(_jmotif.repair_priority_queue_queue_head_get, _jmotif.repair_priority_queue_queue_head_set)
    __swig_setmethods__["nodes"] = _jmotif.repair_priority_queue_nodes_set
    __swig_getmethods__["nodes"] = _jmotif.repair_priority_queue_nodes_get
    if _newclass:
        nodes = _swig_property(_jmotif.repair_priority_queue_nodes_get, _jmotif.repair_priority_queue_nodes_set)

    def __init__(self):
        this = _jmotif.new_repair_priority_queue()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def enqueue(self, digram):
        return _jmotif.repair_priority_queue_enqueue(self, digram)

    def dequeue(self):
        return _jmotif.repair_priority_queue_dequeue(self)

    def peek(self):
        return _jmotif.repair_priority_queue_peek(self)

    def get(self, digram_string):
        return _jmotif.repair_priority_queue_get(self, digram_string)

    def update_digram_frequency(self, digram_string, new_value):
        return _jmotif.repair_priority_queue_update_digram_frequency(self, digram_string, new_value)

    def contains_digram(self, digram_string):
        return _jmotif.repair_priority_queue_contains_digram(self, digram_string)

    def to_array(self):
        return _jmotif.repair_priority_queue_to_array(self)

    def remove_node(self, node):
        return _jmotif.repair_priority_queue_remove_node(self, node)

    def to_string(self):
        return _jmotif.repair_priority_queue_to_string(self)

    def consistency_check(self):
        return _jmotif.repair_priority_queue_consistency_check(self)
    __swig_destroy__ = _jmotif.delete_repair_priority_queue
    __del__ = lambda self: None
repair_priority_queue_swigregister = _jmotif.repair_priority_queue_swigregister
repair_priority_queue_swigregister(repair_priority_queue)

class rule_record(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rule_record, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rule_record, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rule_id"] = _jmotif.rule_record_rule_id_set
    __swig_getmethods__["rule_id"] = _jmotif.rule_record_rule_id_get
    if _newclass:
        rule_id = _swig_property(_jmotif.rule_record_rule_id_get, _jmotif.rule_record_rule_id_set)
    __swig_setmethods__["rule_string"] = _jmotif.rule_record_rule_string_set
    __swig_getmethods__["rule_string"] = _jmotif.rule_record_rule_string_get
    if _newclass:
        rule_string = _swig_property(_jmotif.rule_record_rule_string_get, _jmotif.rule_record_rule_string_set)
    __swig_setmethods__["expanded_rule_string"] = _jmotif.rule_record_expanded_rule_string_set
    __swig_getmethods__["expanded_rule_string"] = _jmotif.rule_record_expanded_rule_string_get
    if _newclass:
        expanded_rule_string = _swig_property(_jmotif.rule_record_expanded_rule_string_get, _jmotif.rule_record_expanded_rule_string_set)
    __swig_setmethods__["rule_occurrences"] = _jmotif.rule_record_rule_occurrences_set
    __swig_getmethods__["rule_occurrences"] = _jmotif.rule_record_rule_occurrences_get
    if _newclass:
        rule_occurrences = _swig_property(_jmotif.rule_record_rule_occurrences_get, _jmotif.rule_record_rule_occurrences_set)
    __swig_setmethods__["rule_intervals"] = _jmotif.rule_record_rule_intervals_set
    __swig_getmethods__["rule_intervals"] = _jmotif.rule_record_rule_intervals_get
    if _newclass:
        rule_intervals = _swig_property(_jmotif.rule_record_rule_intervals_get, _jmotif.rule_record_rule_intervals_set)

    def __init__(self):
        this = _jmotif.new_rule_record()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _jmotif.delete_rule_record
    __del__ = lambda self: None
rule_record_swigregister = _jmotif.rule_record_swigregister
rule_record_swigregister(rule_record)

class rra_discord_record(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rra_discord_record, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rra_discord_record, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rule"] = _jmotif.rra_discord_record_rule_set
    __swig_getmethods__["rule"] = _jmotif.rra_discord_record_rule_get
    if _newclass:
        rule = _swig_property(_jmotif.rra_discord_record_rule_get, _jmotif.rra_discord_record_rule_set)
    __swig_setmethods__["start"] = _jmotif.rra_discord_record_start_set
    __swig_getmethods__["start"] = _jmotif.rra_discord_record_start_get
    if _newclass:
        start = _swig_property(_jmotif.rra_discord_record_start_get, _jmotif.rra_discord_record_start_set)
    __swig_setmethods__["end"] = _jmotif.rra_discord_record_end_set
    __swig_getmethods__["end"] = _jmotif.rra_discord_record_end_get
    if _newclass:
        end = _swig_property(_jmotif.rra_discord_record_end_get, _jmotif.rra_discord_record_end_set)
    __swig_setmethods__["nn_distance"] = _jmotif.rra_discord_record_nn_distance_set
    __swig_getmethods__["nn_distance"] = _jmotif.rra_discord_record_nn_distance_get
    if _newclass:
        nn_distance = _swig_property(_jmotif.rra_discord_record_nn_distance_get, _jmotif.rra_discord_record_nn_distance_set)

    def __init__(self):
        this = _jmotif.new_rra_discord_record()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _jmotif.delete_rra_discord_record
    __del__ = lambda self: None
rra_discord_record_swigregister = _jmotif.rra_discord_record_swigregister
rra_discord_record_swigregister(rra_discord_record)


def _str_to_repair_grammar(s):
    return _jmotif._str_to_repair_grammar(s)
_str_to_repair_grammar = _jmotif._str_to_repair_grammar

def str_to_repair_grammar(str):
    return _jmotif.str_to_repair_grammar(str)
str_to_repair_grammar = _jmotif.str_to_repair_grammar

def find_discords_rra(series, w_size, paa_size, a_size, nr_strategy, n_threshold=0.01, discords_num=3):
    return _jmotif.find_discords_rra(series, w_size, paa_size, a_size, nr_strategy, n_threshold, discords_num)
find_discords_rra = _jmotif.find_discords_rra

def col_means(m):
    return _jmotif.col_means(m)
col_means = _jmotif.col_means

def subseries(ts, start, end):
    return _jmotif.subseries(ts, start, end)
subseries = _jmotif.subseries

def armaRand():
    return _jmotif.armaRand()
armaRand = _jmotif.armaRand

def _alphabet_to_cuts(a_size):
    return _jmotif._alphabet_to_cuts(a_size)
_alphabet_to_cuts = _jmotif._alphabet_to_cuts

def _count_spaces(s):
    return _jmotif._count_spaces(s)
_count_spaces = _jmotif._count_spaces

def _mean(ts, start, end):
    return _jmotif._mean(ts, start, end)
_mean = _jmotif._mean

def _znorm(ts, threshold):
    return _jmotif._znorm(ts, threshold)
_znorm = _jmotif._znorm

def _paa(ts, paa_num):
    return _jmotif._paa(ts, paa_num)
_paa = _jmotif._paa

def _paa2(ts, paa_num):
    return _jmotif._paa2(ts, paa_num)
_paa2 = _jmotif._paa2

def _euclidean_dist(seq1, seq2):
    return _jmotif._euclidean_dist(seq1, seq2)
_euclidean_dist = _jmotif._euclidean_dist

def _subseries(ts, start, end):
    return _jmotif._subseries(ts, start, end)
_subseries = _jmotif._subseries

def _series_to_string(ts, a_size):
    return _jmotif._series_to_string(ts, a_size)
_series_to_string = _jmotif._series_to_string

def _is_equal_mindist(a, b):
    return _jmotif._is_equal_mindist(a, b)
_is_equal_mindist = _jmotif._is_equal_mindist

def _sax_via_window(ts, w_size, paa_size, a_size, nr_strategy, n_threshold):
    return _jmotif._sax_via_window(ts, w_size, paa_size, a_size, nr_strategy, n_threshold)
_sax_via_window = _jmotif._sax_via_window
# This file is compatible with both classic and new-style classes.


